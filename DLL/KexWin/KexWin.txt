-----------------------------------------------------------------------
	ウィンドウ参照 DLL for HSP	[KexWin.dll]
	    Ver. 2.00		(c) 1999 KLAUS
	    各 機能 / 命令 説明ファイル
-----------------------------------------------------------------------
【インストール】
	・HSPスクリプトエディタで実行のとき---
		[KexWin.dll]をHSPのあるフォルダ
	・*.exe化したとき---
		作成した [*.exe] と同じフォルダ

	　　にコピーしてください．


【インクルード】
	各命令を使用するスクリプトの先頭に、
		#include "KexWin.as"
	と記述するか、
		#uselib "KexWin.DLL"
	と記述してから、#func で必要な命令をインクルードしてください．


【各 機能 / 命令】

    KexWin.DLL 情報 ---------------------------------------------------

	KexWinVer			;//タイプ $10

	    説明 :
		このDLLのバージョンを取得します．

	    stat :
		バージョンNoが格納されます．
		バージョンNoが 1.23 のとき、statには123が格納されます．

	    refstr :
		以下のバージョン記号が格納されます．
		    "" ----------------	正規版
		    "a" 〜 "z" --------	β版
		    "a-α" 〜 "z-ω" --	β版のテスト版


    ウィンドウハンドル 系 ---------------------------------------------

	GetActWin p1			;//タイプ $13
		p1 ------------	ウィンドウハンドルを格納する数値変数

	    説明 :
		アクティブウィンドウのウィンドウハンドルを取得し、p1に格納します．
		p1が数値型の変数でないときは、p1は数値型に変換されます．

	    stat :
		取得したウィンドウのタイトルの文字数が返ります．
		DLL内でエラーが出た場合、0 が格納されます．

	    refstr :
		取得したウィンドウのタイトルのうち64文字まで(\0を含む)を格納します．


	GetHspWin			;//タイプ $12

	    説明 :
		現在のHSPウィンドウのウィンドウハンドルを取得し、statに格納します．

	    stat :
		取得したHSPウィンドウのウィンドウハンドルを格納

	    refstr :
		取得したウィンドウのタイトルのうち64文字まで(\0を含む)


	WinFinder p1 , p2		;//タイプ $17
		p1 ------------	ウィンドウハンドルを格納する数値変数
		p2 ------------	探したいウィンドウのタイトルにマッチする文字列

	    説明 :
		p2の文字列から、現在存在するウィンドウのタイトルにマッチする
		  ウィンドウハンドルを取得します．

	    stat :
		取得したウィンドウのタイトルの文字数
		マッチするウィンドウを探せなかった場合、0 が入ります．

	    refstr :
		取得したウィンドウのタイトルのうち64文字まで(\0を含む)を格納します．


	ExistWin p1			;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定

	    説明 :
		p1のウィンドウハンドルが有効かどうか調べます．

	    stat :
		ウィンドウハンドルが有効のときは 0 、無効のときは -1 を格納します．


    ウィンドウキャプション 系 -----------------------------------------

	GetWinTitle p1 , p2		;//タイプ $13
		p1(変数) ------	ウィンドウタイトルを格納する文字型変数
		p2 ------------	ウィンドウハンドルを指定

	    説明 :
		ウィンドウタイトルを取得し、p1に格納します．

	    stat :
		ウィンドウタイトルの文字数を返します．

	    refstr :
		p2のウィンドウハンドルが見つからないとき、
		　statに12が、refstrに"ERROR"が入ります．


	SetWinTitle p1 , p2		;//タイプ $04
		p1 ------------	ウィンドウのハンドルを指定
		p2 ------------	ウィンドウのタイトルを指定

	    説明 :
		p1のウィンドウハンドルのウィンドウのタイトルを、
		　p2に変更します．

	    stat :
		p1のウィンドウハンドルが無効のとき、11 が格納されます．
		DLL内でエラーが出た場合、1 が格納されます．


	FlashWin p1 , p2		;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	フラグ

	    説明 :
		p1のウィンドウハンドルのウィンドウのタイトルバーを点滅させます．
		p2に1を指定すると、点滅させます．
		　タイトルバーが、点灯していないときは、点灯させ、
		　点灯しているときは、消灯します．
		p2に0を指定すると、元に戻します．


    ウィンドウコントロール 系 -----------------------------------------

	EnableWin p1 , p2		;//タイプ $02
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	フラグ

	    説明 :
		p1のウィンドウハンドルのウィンドウへのマウス・キーボードの入力を制御します．
		　p1が0のときは、現在のHSPウィンドウに対して制御します．
		p2に1を指定すると、無効になり、0を指定すると有効になります．
		無効に出来るウィンドウは１つだけです．
		　２回目以降は、前回のウィンドウを有効にします．

		+------------------------------------------------------------------------------
		|このコマンドは、ウィンドウへのアクセスを制御します．
		|EnableWin を 宣言したら、FreeEnableWin も宣言してください．
		|　FreeEnableWin でクリーンアップしていますが、
		|　出来るだけ、スクリプト側で制御を元にもでしてください．
		+------------------------------------------------------------------------------

	    stat :
		エラーのときは、0 以外が格納されます．
		p1のウィンドウハンドルのウィンドウが存在しないときは、11 が入ります．


	IsEnableWin p1			;//タイプ $02
		p1 ------------	ウィンドウハンドルを指定

	    説明 :
		p1のウィンドウへのマウス・キーボードの入力が有効か調べます．
		　p1が0のときは、現在のHSPウィンドウに対して処理されます．

	    stat :
		入力が有効のときは 0 が、無効のときは 1 が入ります．
		p1指定エラーのときは、11 が入ります．


	FreeEnableWin			;//タイプ $100

	    説明 :
		EnableWin で変更したウィンドウ変更した制御を有効にします．

		+------------------------------------------------------------------------------
		|EnableWin を 宣言したら、FreeEnableWin も宣言してください．
		|　タイプ $100 なのでクリーンアップでHSP終了時に自動実行されますが、
		|　出来るだけスクリプト内で実行すべきです．
		+------------------------------------------------------------------------------


    マウスカーソル 系 -------------------------------------------------

	MouseLimit p1 , p2 , p3 , p4	;//タイプ $00
		p1 ------------	始点のｘ座標
		p2 ------------	始点のｙ座標
		p3 ------------	終点のｘ座標
		p4 ------------	終点のｙ座標

	    説明 :
		マウスの移動範囲を始点ｘ,ｙ座標から終点ｘ,ｙ座標の範囲に設定します．
		　以後、マウスの移動範囲外へマウスを移動する事が基本的に出来なくなります．
		また、マウスの位置を (p1,p2) 座標に移動します．
		p1 > p3 または p2 > p4 のときは( MouseLimit 1 , 1 など )、
		　移動範囲を解除します．

	    stat :
		DLL内でエラーが生じたときは、0 以外が格納されます．


	MouseWinLimit p1 , p2		;//タイプ $02
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	フラグ

	    説明 :
		マウスの移動範囲をp1のウィンドウの大きさに設定します．
		　p1が 0 のときは、現在のHSPウィンドウに対して設定します．
		また、マウスの位置を ウィンドウの左上の座標に移動します．
		p2に 1 を指定すると、マウスの移動範囲を設定し、
		p2に 0 を指定すると設定を解除します．


	FreeMouseLimit			;//タイプ $100

	    説明 :
		MouseLimit、MouseWinLimit で設定したマウスの移動範囲を解除します．

		+------------------------------------------------------------------------------
		|MouseLimit、MouseWinLimit を 宣言したら、FreeMouseLimit も宣言してください．
		|　タイプ $100 なのでクリーンアップでHSP終了時に自動実行されますが、
		|　出来るだけスクリプト内で実行すべきです．
		+------------------------------------------------------------------------------


	SysCur p1 , p2 , p3		;//タイプ $02
		p1 ------------	システムカーソルの指定フラグ
		p2 ------------	変更フラグ
		p3 ------------ 即時変更フラグ

	    説明 :
		システムのカーソルを読みこみ、変更します．
		　p1は以下の数値を指定します．
			0 -----	標準矢印カーソル
			1 -----	アイビーム(縦線)カーソル
			2 -----	砂時計カーソル
			3 -----	十字カーソル
			4 -----	垂直の矢印カーソル
			5 -----	斜め右下がりの両方向矢印カーソル
			6 -----	斜め左下がりの両方向矢印カーソル
			7 -----	左右両方向矢印カーソル
			8 -----	上下両方向矢印カーソル
			9 -----	４方向矢印カーソル
			10 ----	禁止カーソル
			11 ----	手形カーソル
			12 ----	標準矢印カーソルおよび小型砂時計カーソル
			13 ----	ヘルプカーソル
		p2が 0 のとき、カーソルを変更します．
		　p2が 1 のとき、ロードのみを行い、カーソルの変更はしません．
		　SysCurを実行した後、DrawCurでHSPのウィンドウに描画することが出来ます．
		p3が 0 のとき、カーソルを再描画します．
		　p3が 1 のとき、カーソルを再描画しません．
		　　(マウスの再描画は、カーソル位置を再指定する事で実現しています)
		　　(また、マウスを動かすなどをするとシステム側で再描画されます)

	    stat :
		正常終了のときは、0 が入ります．


	FileCur p1 , p2 , p3		;//タイプ $06
		p1 ------------	ファイルのパス
		p2 ------------	変更フラグ
		p3 ------------ 即時変更フラグ

	    説明 :
		p1で指定した .curファイル または、.aniファイル を読みこみ、
		　カーソルを変更します．
		p2が 0 のとき、カーソルを変更します．
		　p2が 1 のとき、ロードのみを行い、カーソルの変更はしません．
		　FileCurを実行した後、DrawCurでHSPのウィンドウに描画することが出来ます．
		p3が 0 のとき、カーソルを再描画します．
		　p3が 1 のとき、カーソルを再描画しません．
		　　(マウスの再描画は、カーソル位置を再指定する事で実現しています)
		　　(また、マウスを動かすなどをするとシステム側で再描画されます)

	    stat :
		正常終了のときは 0 が、エラーのときは 0 以外が入ります．


	DrawCur p1 , p2 , p3		;//タイプ $00
		p1 ------------	描画する幅 (0のときはデフォルトの幅)
		p2 ------------	描画する高さ (0のときはデフォルトの高さ)
		p3 ------------	(アニメーションカーソルのとき)フレームのインデックス

	    説明 :
		SysCur、FileCur でロードしたカーソルをアイコンとして、
		　posで指定したポジションに描画します．
		p1, p2で、描画するサイズを指定できます．
*		　p1、p2が0の時、カーソルのサイズで描画します．
		FileCurでアニメーションカーソルをロードしたときは、
		　p3にフレームのインデックスを指定できます．

	    stat :
		正常終了のときは、0 が入ります．


	MouseMove p1, p2		;//タイプ $00
		p1 ------------	座標x
		p2 ------------	座標y

	    説明：
		マウスをp1,p2の座標に移動します．

	    stat :
		正常終了のときは、0 が入ります．


*	MouseLClick p1			;//タイプ $00
*	MouseMClick p1			;//タイプ $00
*	MouseRClick p1			;//タイプ $00
*		p1 ------------	押し下げから押し上げまでの時間(ミリ秒)
*
*	　　説明：
*		(L=左クリック、M=中クリック、R=右クリック)
*		マウスをクリックさせます．
*		p1にミリ秒単位で時間を指定すると、
*		　押し下げしたあとで、p1分だけ待ち、押し上げします．
*		　省略、または、マイナス値を指定した場合は、
*		　10が指定されます．
*
*	    stat :
*		正常終了のときは、0 が入ります．
*
*
*	MouseLDown			;//タイプ $00
*	MouseMDown			;//タイプ $00
*	MouseRDown			;//タイプ $00
*
*	    説明：
*		(L=左クリック、M=中クリック、R=右クリック)
*		マウスのボタンを押し下げ状態にします．
*
*	　　stat:
*		常に0が入ります．
*
*
*	MouseLUp			;//タイプ $00
*	MouseMUp			;//タイプ $00
*	MouseRUp			;//タイプ $00
*
*	    説明：
*		(L=左クリック、M=中クリック、R=右クリック)
*		マウスのボタンを押し上げ状態にします．
*
*	　　stat:
*		常に0が入ります．


    ファイル実行 系 ---------------------------------------------------

	CmdExec p1 , p2			;//タイプ $06
		p1 ------------	コマンドとパラメータ
		p2 ------------	起動フラグ

	    説明 :
		コマンドを実行します．　パラメータも指定できます．
		p2に以下の起動フラグを指定できます．
		    -1	非表示で起動
		    0	ノーマル起動
		    1	ノーマル起動
		    2	アクティブで最小化で起動
		    3	アクティブで最大化で起動
		    4	直前の位置でアクティブウィンドウはそのままで起動
		    5	現在の位置とサイズでアクティブで起動
		    6	最小化し、次のウィンドウをアクティブして起動
		    7	最小化し、アクティブはそのままで起動
		    8	現在の状態で起動
		    9	元の位置とサイズでアクティブ起動
		    10	呼び出したアプリのデフォルトの表示状態で起動

	    stat :
		正常に実行されると、32より大きい値が返ります．
		エラーのときは以下の値が帰ります．
		    0	メモリ不足またはリソース不足
		    2	ファイルが見つからない
		    3	パスが見つからない
		    11	.exeファイルが無効


    フォント 系 -------------------------------------------------------

	GetMesSize p1 , p2		;//タイプ $06
		p1 ------------	文字列を指定
		p2 ------------	フラグ

	    説明 :
		p1の文字列のサイズを取得し、statに返します．
		　p2が 0 のときは幅を、1 のときは高さを取得します．

	    stat :
		幅、または、高さが入ります．
		エラーのときは、0 が入ります．


    アイコン 系 -------------------------------------------------------

	IcoCnt p1 , p2			;//タイプ $07
		p1 ------------	アイコンの総数を格納する変数を指定
		p2 ------------	ファイルのパス

	    説明 :
		p2のファイルが持つアイコンの総数をp1に代入します．

	    stat :
		正常終了のときは、0 が入ります．


	SysIco p1			;//タイプ $00
		p1 ------------	ロードするアイコンのフラグ

	    説明 :
		Windowsが定義しているアイコンをロードします．
		　表示するには、DrawIco を使います．
		p1に指定するのは、以下の通り
		    32512	アプリケーションアイコン
		    32513	ストップ印のアイコン
		    32514	疑問符のアイコン
		    32515	感嘆符のアイコン
		    32516	アスタリスクのアイコン (吹き出しの中に i の文字)
		    32517	Windowsロゴアイコン

	    stat :
		正常終了のときは、0 が入ります．


	FileIco p1 , p2			;//タイプ $06
		p1 ------------	ファイルのパス
		p2 ------------	アイコンのインデックス

	    説明 :
		p1のファイルからアイコンをロードします．
		　p2にアイコンのインデックスを指定できます．

	    stat :
		正常終了のときは、0 が入ります．


*	GetWinIco p1, p2		;//タイプ $02
*		p1 ------------	ウィンドウハンドル
*		p2 ------------	フラグ
*
*	　　説明：
*		p1のウィンドウのアイコンを取得します．
*		p1=0 の時、現在のHSPウィンドウのハンドルを使用します．
*		　それ以外は、p1をハンドルとして使用します．
*		p2のフラグにより取得するアイコンを指定します．
*			0 = アイコン
*			1 = 小さいアイコン
*
*	    stat :
*		正常終了のときは、0 が入ります．


	DrawIco p1 , p2			;//タイプ $00
		p1 ------------	描画する幅 (0のときはデフォルトの幅)
		p2 ------------	描画する高さ (0のときはデフォルトの高さ)

	    説明 :
		SysIco、FileIco でロードしたアイコンを、
		　posで指定したポジションに描画します．
		p1,p2で、描画するサイズを指定できます．
*		　p1、p2が0の時、アイコンのサイズで描画します．

	    stat :
		正常終了のときは、0 が入ります．


    ウィンドウ情報 系 -------------------------------------------------

	MesDlg p1 , p2 , p3 , p4	;//タイプ $07
		p1 ------------	表示するテキストの入った変数
		p2 ------------	キャプションのテキスト
		p3 ------------	内容と動作のフラグ
		p4 ------------	呼び出し元のウィンドウハンドル

	    説明 :
		Windows標準のダイアログを表示します．
		HSPの[dialog]の拡張版です．
		p1に、ダイアログ中に表示するテキストの入った変数を指定します．
		p2に、ダイアログのキャプションのテキストを指定します．
		p3には、ダイアログの内容と動作のフラグを指定します．
		　以下の１．〜4．から1つずつ値を足し、必要であれば５．の値を足した数値を
		　指定します．
			１．ボタン
			    0x0		[OK]
			    0x1		[OK] [キャンセル]
			    0x2		[中止] [再試行] [無視]
			    0x3		[はい] [いいえ] [キャンセル]
			    0x4		[はい] [いいえ]
			    0x5		[再試行] [キャンセル]
			２．アイコン
			    0x10	停止アイコン
			    0x20	疑問符アイコン
			    0x30	感嘆符アイコン
			    0x40	アスタリスクアイコン(吹き出しに i )
			３．デフォルトのボタン
			    0x000	最初のボタンをデフォルトに
			    0x100	2番目のボタンをデフォルトに
			    0x200	3番目のボタンをデフォルトに
			    0x300	4番目のボタンをデフォルトに
			４．動作形態
			    0x0000	メッセージボックスに応答しないと、
					　p4のウィンドウにアクセスできません
			    0x1000	メッセージボックスに応答しないと、
					　p4のウィンドウにアクセスできません
					　また、メッセージボックスを常に最前面に配置します
			    0x2000	p4が0のとき、メッセージボックスに応答しないと、
					　他のウィンドウにアクセスできません
			５．
			    0x4000	ヘルプボタンを追加します
			    0x8000	MB_NOFOCUS
			    0x10000	メッセージボックスを最前面に配置します
			    0x20000	MB_DEFAULT_DESKTOPONLY
			    0x40000	メッセージボックスを最前面に配置します
			    0x80000	テキストを右寄せします
			    0x100000	右から左へテキストを表示します

	    stat :
		メッセージボックスでユーザーが押したボタンの値が入ります．
		    1	[OK]ボタン
		    2	[キャンセル]ボタン
		    3	[中止]ボタン
		    4	[再試行]ボタン
		    5	[無視]ボタン
		    6	[はい]ボタン
		    7	[いいえ]ボタン
		    8	IDCLOSE
		    9	IDHELP
		メッセージボックスを作成できなかった場合は、0 が入ります．
		p1 , p4 指定エラーのときも、0 が入ります．


    座標 系 -----------------------------------------------------------

	CliToScr p1 , p2 , p3 , p4	;//タイプ $03
		p1 ------------	スクリーン座標を格納する数値配列(p1.0,p1.1)
		p2 ------------	クライアントのｘ座標
		p3 ------------	クライアントのｙ座標
		p4 ------------	調べるウィンドウのハンドル

	    説明 :
		p4のウィンドウのクライアント座標(p2,p3)から、スクリーン座標を調べて、
		　p1の配列、p1.0にｘ座標、p1.1にｙ座標を格納します．

	    stat :
		正常終了のときは、0 が入ります．


	ScrToCli p1 , p2 , p3 , p4	;//タイプ $03
		p1 ------------	クライアント座標を格納する数値配列(p1.0,p1.1)
		p2 ------------	スクリーンのｘ軸
		p3 ------------	スクリーンのｙ軸
		p4 ------------	調べるウィンドウのハンドル

	    説明 :
		スクリーン座標(p2,p3)から、p4のウィンドウのクライアント座標を調べて、
		　p1の配列、p1.0にｘ座標、p1.1にｙ座標を格納します．

	    stat :
		正常終了のときは、0 が入ります．


    リージョン 系 -----------------------------------------------------

	ReadyRgn p1 , p2		;//タイプ $02
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	リージョン作成用ID

	    説明 :
		リージョンを作成する初期化を行います．
		p1のウィンドウに対してリージョン処理を行います．
		　p1に、0 を指定すると、現在のHSPウィンドウに対して処理します．
		p2は、リージョン作成用のIDで、0〜15までを指定します．
		　以後、このIDを使って処理します．
		　最大で、16個までのリージョンを変更する事が可能です．

	    stat :
		正常終了のときは、0 が入ります．
		　11はp1指定エラー、12はp2指定エラーです．


	RectRgn p1 , p2 , p3 , p4	;//タイプ $03
		p1 ------------	長方形の座標の入った数値配列(p1.0,p1.1,p1.2,p1.3)
		p2 ------------	リージョン作成用ID
		p3 ------------	角の丸みの幅
		p4 ------------	角の丸みの高さ

	    説明 :
		p2の作成用リージョンに対して長方形のリージョンを作成します．
		p1の配列で長方形を指定します．(p1.0 , p1.1)で左上の座標、
		　(p1.2 , p1.3)で右下の座標が指定されます．
		p3、p4を指定すると、角の丸い長方形を作成できます．

	    stat :
		正常終了のときは、0 が入ります．


	OvalRgn p1 , p2			;//タイプ $03
		p1 ------------	長方形の座標の入った数値配列
		p2 ------------	リージョン作成ID

	    説明 :
		p2の作成用リージョンに対して楕円形のリージョンを作成します．
		p1の配列で長方形を指定します．(p1.0 , p1.1)で左上の座標、
		　(p1.2 , p1.3)で右下の座標が指定されます．
		　この長方形に接する楕円形のリージョンが作られます．

	    stat :
		正常終了のときは、0 が入ります．


	PolyRgn p1 , p2 , p3 , p4	;//タイプ $03
		p1 ------------	多角形の座標の入った数値配列
		p2 ------------	リージョン作成用ID
		p3 ------------	多角形の頂点の数
		p4 ------------	塗りつぶしモード

	    説明 :
		p2の作成用リージョンに対して多角形のリージョンを作成します．
		p1に多角形の座標の入った配列を、ｘ座標、ｙ座標を交互に指定します．
		 (p1.0,p1.1),(p1.2,p1.3),(p1.4,p1.5),...という様に指定します．
		p3は、多角形の頂点の数で、3以上を指定します．
		　この値により、p1の配列のうち、p3の頂点の座標分だけ使って多角形が作られます．
		p4は、塗りつぶしモードですが、省略しています．


	ImageRgn p1 , p2 , p3		;//タイプ $06
		p1 ------------	画像ファイル
		p2 ------------	リージョン作成用ID
		p3 ------------	フラグ

	    説明 :
		p1のBMP画像ファイルをもとにリージョンを作成します．
		color で指定された色がリージョンの外になります．

		p3 のフラグに以下を指定できます．
			0 = 何もしません、タイトルバーにもリージョンが表示されます
			1 = クライアントにリージョンを作ります(タイトルバー・枠は消えます)
			2 = クライアントにリージョンを作ります(タイトルバーは残します)

		★256色以外のBMPファイル以外を指定した場合、
		★　色がきちんと抜けません．
		★256色BMPを指定してください．

	    stat :
		正常終了のときは、0 が入ります．


	ReadyHspWinRgn p1, p2		;//タイプ $02
		p1 ------------	透過させる色の座標x
		p2 ------------	透過させる色の座標y

	　　説明：
		HspWinRgnで透過させる色の座標を指定します．

	    stat :
		正常終了のときは、0 が入ります．


	HspWinRgn p1, p2		;//タイプ $02
		p1 ------------	リージョン作成用ID
		p2 ------------	フラグ

	　　説明：
		HSPウィンドウの画像から、ReadyHspWinRgnで指定した座標の色を取得し、
		　その色を抜いたリージョンを作成します．

		p2 のフラグに以下を指定できます．
			0 = 何もしません、タイトルバーにもリージョンが表示されます
			1 = クライアントにリージョンを作ります(タイトルバー・枠は消えます)
			2 = クライアントにリージョンを作ります(タイトルバーは残します)

	    stat :
		正常終了のときは、0 が入ります．


	UniteRgn p1 , p2		;//タイプ $00
		p1 ------------	リージョン作成方法
		p2 ------------ リージョン作成用ID

	    説明 :
		p2の作成用リージョンから、更新用リージョンを作成します．
		p1に以下の作成方法を指定します．
		    0	作成用リージョンのコピーを更新用リージョンにします
		    1	作成用リージョンと更新用リージョンの重なり合う部分を
			　更新用リージョンにします
		    2	作成用リージョンと更新用リージョンを組み合わせたものを
			　更新用リージョンにします
		    3	作成用リージョンと更新用リージョンを組み合わせ、
			　重なる部分を除いたものを更新用リージョンにします
		    4	作成用リージョンから更新用リージョンを除いたものを
			　更新用リージョンにします
		    5	0と同じです

	    stat :
		正常終了のときは、0 が入ります．


	BackUpRgn p1			;//タイプ $00
		p1 ------------	UniteRgnしたID

	　　説明：
		UniteRgnした更新用リージョンをバックアップします．

	    stat :
		正常終了のときは、0 が入ります．


	ReSetRgn p1, p2			;//タイプ $00
		p1 ------------	BackUpRgnしたID
		p2 ------------	リージョン作成用ID

	　　説明：
		BackUpRgnしたリージョンを更新用リージョンにします．

	    stat :
		正常終了のときは、0 が入ります．


	SetRgn p1			;//タイプ $00
		p1 ------------	リージョン作成用ID

	    説明 :
		p1の作成用IDで作られ、UniteRgnで作られた更新用リージョンを、
		　ウィンドウにセットします．

		★一度セットしたリージョンは、ReadyRgnで初期化しないと、
		★　変更、セットできません．
		★再度リージョンをいじるときは、ReadyRgnで初期化してください．
		★また、現Ver.では、リージョンの変更を続けるとエラーが出ます．
		★　リージョンの変更は一度にしてください．

	    stat :
		正常終了のときは、0 が入ります．


	FreeRgn				;//タイプ $100

	    説明 :
		リージョン系命令のクリーンアップ・メソッドです．
		作成用リージョンを破棄します．

		+------------------------------------------------------------------------------
		|リージョン系メソッドを実行したら、FreeRgn も宣言してください．
		|　タイプ $100 なのでクリーンアップでHSP終了時に自動実行されますが、
		|　出来るだけスクリプト内で実行すべきです．
		+------------------------------------------------------------------------------


    ウィンドウサイズ 系 -----------------------------------------------

	GetWinRect p1 , p2 , p3		;//タイプ $13
		p1 ------------	ウィンドウの位置の座標を格納する数値配列 または 数値変数
		p2 ------------	ウィンドウハンドル
		p3 ------------	取得フラグ

	    説明 :
		p2のウィンドウのスクリーン上での座標を、p1に格納します．
		p3の取得フラグは以下にの通り、
		    0	p1の配列に、ウィンドウの位置を、左,上,右,下 の順に座標を格納します．
		    1	p1の変数に、ウィンドウの位置の、左の座標を格納します．
		    2	p1の変数に、ウィンドウの位置の、上の座標を格納します．
		    3	p1の変数に、ウィンドウの位置の、右の座標を格納します．
		    4	p1の変数に、ウィンドウの位置の、下の座標を格納します．

	    stat :
		正常終了のときは、0 が入ります．

	    refstr :
		p2のウィンドウのタイトルのうち64文字まで(\0を含む)を格納します．


	GetCliSize p1 , p2 , p3		;//タイプ $13
		p1 ------------	ウィンドウのサイズを格納する数値配列 または 数値変数
		p2 ------------	ウィンドウハンドル
		p3 ------------	取得フラグ

	    説明 :
		p2のウィンドウのクライアントサイズをp1に格納します．
		p3の取得フラグは以下にの通り、
		    0	p1の配列に、クライアントサイズを、幅,高さ の順に格納します．
		    1	p1の変数に、クライアントサイズの幅を格納します．
		    2	p1の変数に、クラインとサイズの高さを格納します．

	    stat :
		正常終了のときは、0 が入ります．

	    refstr :
		p2のウィンドウのタイトルのうち64文字まで(\0を含む)を格納します．


	GetSysMetrics p1 , p2		;//タイプ $03
		p1 ------------	取得した値を格納する数値変数
		p2 ------------	取得フラグ

	    説明 :
		システムの設定値を取得し、p1に格納します．
		p2の取得フラグで指定できる値は、多々あるため、一部のみ以下に示します．
		    0	スクリーン全体のｘ座標
		    1	スクリーン全体のｙ座標
		    4	タイトルバーの高さ
		    11	アイコンのデフォルトのサイズの幅
		    12	アイコンのデフォルトのサイズの高さ
		    13	マウスカーソルのサイズの幅
		    14	マウスカーソルのサイズの高さ
		    67	現在のシステムの起動方法( 0 = 通常 , 1 = safeモード ,
						  2 = ネットワークを使った Safe モード )

	    stat :
		正常終了のときは、0 が入ります．


    サウンド 系 -------------------------------------------------------

	Beeping p1 , p2			;//タイプ $00
		p1 ------------	周波数を指定(NTのみ)
		p2 ------------	鳴らす時間を指定(NTのみ)

	    説明 :
		単純な音(ビープ音)を鳴らします．

	    stat :
		正常終了のときは、0 が入ります．


	MesBeep p1			;//タイプ $00
		p1 ------------	サウンドの種類を指定

	     説明 :
		[コントロールパネル]の[サウンド]を鳴らします．
		p1で種類を選びます．
		    0	ビープ音
		    1	メッセージ(情報)
		    2	メッセージ(警告)
		    3	システムエラー
		    4	メッセージ(問い合わせ)
		    5	一般の警告音
		    6	MB_USERICON

	    stat :
		正常終了のときは、0 が入ります．


    ウィンドウスタイル 系 ---------------------------------------------

	GetColor p1 , p2		;//タイプ $03
		p1 ------------	RGBを格納する数値配列
		p2 ------------	取得フラグ

	    説明 :
		[画面のデザイン]の色を取得し、p1の配列に赤,緑,青 の順にを格納します．
		p2の取得フラグで指定できる色は、多々あるため、一部のみ以下に示します．
		    5	ウィンドウの背景色
		    4	メニューの背景色


	ShowWin p1 , p2			;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	表示形式

	    説明 :
		p1のウィンドウの表示形式を変更します．
		p2で表示形式を選びます．多々ありますが、一部のみ示します．
		    0	非表示
		    1	通常表示
		    3	最大化
		    6	最小化
		    10	起動時と同じ表示形式


	IsWinVisible p1			;//タイプ $10
		p1 ------------	ウィンドウハンドルを指定

	    説明 :
		p1のウィンドウの表示形式を調べます．

	    stat :
		表示形式を格納します．
		表示形式は、ShowWinのp2で指定する値と同じです．

	    refstr :
		エラーが出た場合、refstrに"ERROR"が入ります．


	MoveWin p1 , p2 , p3 , p4	;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	移動先のｘ座標
		p3 ------------ 移動先のｙ座標
		p4 ------------	描画フラグ

	    説明 :
		p1のウィンドウを、(p2,p3)の位置に移動します．
		p4が 0 のとき、再描画を行います．
		　p4が 1 のときは、再描画を行いません．

	    stat :
		正常終了のときは、0 が入ります．


	SizeWin p1 , p2 , p3 , p4	;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定
		p2 ------------	ウィンドウの幅
		p3 ------------	ウィンドウの高さ
		p4 ------------	描画フラグ

	    説明 :
		p1のウィンドウのサイズを変更します．
		　p2,p3でウィンドウのサイズを指定します．
		p4が 0 のとき、再描画を行います．
		　p4が 1 のときは、再描画を行いません．

	    stat :
		正常終了のときは、0 が入ります．


	SetActWin p1			;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定

	    説明 :
		p1のウィンドウをアクティブにします．

	    stat :
		正常終了のときは、0 が入ります．


	DelWin p1			;//タイプ $00
		p1 ------------	ウィンドウハンドルを指定

	    説明 :
		p1のウィンドウを破棄します．

	    stat :
		正常終了のときは0 が入ります．


	SetPriority p1 , p2		;//タイプ $02
		p1 ------------	HSPプロセスのプライオリティ用フラグ
		p2 ------------	HSPスレッドのプライオリティ用フラグ

	    説明 :
		HSPのプロセスのプライオリティをp1により変更します．
		　p1の値 ---
			0 -----	ノーマル
			1 -----	システムがアイドルのときのみ稼動
			2 -----	ノーマル (0と同じ)
			3 -----	優先度の高いプロセスで稼動

		HSPのスレッドのプライオリティをp2により変更します．
		　p2の値 ---
			0 -----	ノーマル
			1 -----	1番低い優先順位			低い
			2 ----- 2番目に低い優先順位		 ↑
			3 ----- ノーマルより1つ低い優先順位	 ↑
			4 ----- ノーマル(0と同じ)		ノーマル
			5 ----- ノーマルより1つ高い優先順位	 ↓
			6 ----- 2番目に高い優先順位		 ↓
			7 ----- 1番高い優先順位			高い


	    stat :
		正常終了時には、0 が入ります．


;//--- EOF
