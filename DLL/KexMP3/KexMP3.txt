-----------------------------------------------------------------------
	MP3再生 DLL for HSP	[KexMP3.dll]
	    Ver. 2.04		(c) 1999 KLAUS
	    各 機能 / 命令 説明ファイル
-----------------------------------------------------------------------
(行頭のアスタリスク(*)は本バージョンでの更新箇所です)

【インストール】
	・HSPスクリプトエディタで実行のとき---
		[KexWin.dll]をHSPのあるフォルダ
	・*.exe化したとき---
		作成した [*.exe] と同じフォルダ

	　　にコピーしてください．


【インクルード】
	各命令を使用するスクリプトの先頭に、
		#include "KexMP3.as"
	と記述してください．

	自前で #uselib , #func で追加するのはお勧めしません．
	　バージョンアップ時にタイプが変更される事がありえます．．．


【各 機能 / 命令】

    KexMP3.DLL 情報 ---------------------------------------------------

	KexMP3Ver			;//タイプ $10

	    説明 :
		このDLLのバージョンを取得します．

	    stat :
		バージョンNoが格納されます．
		バージョンNoが 1.23 のとき、statには123が格納されます．

	    refstr :
		以下のバージョン記号が格納されます．
		    "" ----------------	正規版
		    "a" 〜 "z" --------	β版
		    "a-α" 〜 "z-ω" --	β版のテスト版


    MP3 再生 -------------------------------------------

	MP3Ready p1 , p2 , p3		;//タイプ $00
*		p1 ------------	左側のWave音量(0〜65535)
*		p2 ------------	右側のWave音量(0〜65535)
		p3 ------------	ボリューム用フラグ

	    説明 :
		MP3系のメソッドを実行する準備をします．
		　この実行後に以下のMP3系のメソッドを実行できる様になります．

		p1 , p2 を指定する事により、Wave音量を指定できます．
		　MP3系の再生で使われる音量もWave形式です．
*		p1 , p2 の音量は、0 が最小、65535 が最大 音量になり、
*		　0 〜 65535 の範囲で指定します．
*		p1 , p2 が、0 〜 65535 の範囲外のときは、現在のWave音量が使われます．

		p3 に 0 以外を指定すると、設定される音量(p1,p2 or 現在の音量)が、
		　記憶され、クリーンアップ時にその音量に戻されます．

	    stat :
		正常終了のときは、0 が入ります．


	MP3SetVol p1 , p2 , p3		;//タイプ $00
*		p1 ------------	左側のWave音量(0〜65535)
*		p2 ------------ 右側のWave音量(0〜65535)
*		p3 ------------	ボリューム用フラグ

	    説明 :
		p1 , p2 を指定し、Wave音量を指定します．
		　MP3系の再生で使われる音量もWave形式です．
*		p1 , p2 の音量は、0 が最小、65535 が最大 音量になり、
*		　0 〜 65535 の範囲で指定します．

		p3 に 0 以外を指定すると、設定される音量(p1,p2 or 現在の音量)が、
		　記憶され、クリーンアップ時にその音量に戻されます．

	    stat :
		正常終了のときは、0 が入ります．


	MP3Open p1			;//タイプ $06
		p1 ------------	MP3ファイル
		p2 ------------ 再生(出力)用フラグ

	    説明 :
		p1 のMP3のファイルを開き、再生等が出来るようにします．

		p2 の再生(出力)用フラグ2以下の値を組み合わせる事で、
		　CPUの負荷を軽減する事が出来ます．
			0	通常
			1	チャンネルを1(モノラル)にする
			2	サンプリングレートを通常の1/2(半分)にする
			4	サンプリングレートを通常の1/4にする
		　例えば、p2 に 5 を入れると、モノラルで、サンプリングレートが1/4で
		　　再生されます．

	    stat :
		正常終了のときは、0 が入ります．


	MP3Close			;//タイプ $00

	    説明 :
		MP3Openで開いたファイルを閉じます．

	    stat :
		正常終了のときは、0 が入ります．


	MP3Play				;//タイプ $00

	    説明 :
		MP3Openで開いたファイルを再生します．

	    stat :
		正常終了のときは、0 が入ります．


	MP3Stop				;//タイプ $00

	    説明 :
		再生を停止します．

	    stat :
		正常終了のときは、0 が入ります．


	MP3State			;//タイプ $00

	    説明 :
		再生の状態を取得し、statに格納します．
		MP3Play等のすぐ後に、MP3Stateを実行した場合、
		　すぐには状態が変更されません．
		　wait 等で、時間を置いてください．
		　(動作確認環境では、wait 1でいけましたが．．．)

	    stat :
		再生の状態が格納されます．
			0	停止中
			1	再生中
			2	一時停止中


	MP3Start			;//タイプ $00

	    説明 :
		現在の状態に合わせて、再生 / 一時停止 / 復帰再生 を行います．

		    停止中だった場合　⇒⇒⇒　最初から再生
		    再生中だった場合　⇒⇒⇒　一時停止
		    一時停止中だった場合　⇒　復帰再生

	    stat :
		正常終了のときは、0 が入ります．


	MP3Seek p1			;//タイプ $00
		p1 ------------	再生位置を秒単位で指定

	    説明 :
		p1の位置に再生位置を移動します．


	    stat :
		正常終了のときは、0 が入ります．


	MP3Pos				;//タイプ $00

	    説明 :
		現在の再生位置を stat に取得します．

	    stat :
		現在の再生位置が秒単位で格納されます．
		エラー時は、0 が格納されます．


	MP3Clean			;//タイプ $100

	    説明 :
		MP3系のクリーンアップを行います．
		$100ですので、任意で実行しなくても、HSP終了時に自動で実行されます．

	    stat :
		正常終了のときは、0 が入ります．


    MP3 情報 -------------------------------------------

	MP3GetFmt p1			;//タイプ $06
		p1 ------------	MP3ファイル

	    説明 :
		p1のMP3ファイルがの仕様を調べます．

	    stat :
		結果が返ります．
			1 = ID3 Tag v1 仕様
			2 = ID3 Tag v2 仕様
			4 = RIFF MP3 仕様
		　複数の仕様に対応しているときは、その値をたしたものが格納されます．
			(例 : ID3Tag v1 と RIFF MP3 に対応しているときは、
			(　　 1+4 の 5 が格納されます

	    ※ID3 Tag v1仕様 :
		ファイルの後ろから128バイトを読みこみ、仕様の判別を行います．
	    ※ID3 Tag v2仕様 :
		ファイルの先頭が、"ID3"か判別します．
	    ※RIFF MP3仕様 :
		ファイルの先頭が、"RIFF"か判別し、仕様の判別を行います．


	MP3Info p1 , p2			;//タイプ $03
		p1 ------------	情報を格納する変数
		p2 ------------	フラグ

	    説明 :
		MP3Openで開いたMP3ファイルの情報を取得します．

		p2のフラグにより、取得情報とp1の変数の型が違います．
			p2 = 0　⇒⇒⇒　p1 = 曲名		(文字列:128バイト)
			p2 = 1　⇒⇒⇒　p1 = アーティスト名	(文字列:128バイト)
			p2 = 2　⇒⇒⇒　p1 = チャンネル		(数値型:1 or 2)
			p2 = 3　⇒⇒⇒　p1 = ビットレート	(数値型)
			p2 = 4　⇒⇒⇒　p1 = サンプリングレート (数値型)
			p2 = 5　⇒⇒⇒　p1 = 曲の長さ(秒単位)	(数値型)
		　チャンネルは、1がモノラル、2がステレオです．


	MP3FileInfo p1 , p2 , p3	;//タイプ $07
		p1 ------------	情報を格納する変数
		p2 ------------	ファイルのパス
		p3 ------------	フラグ

	    説明 :
		p2のファイルのID3TagV1情報を取得し、p1に格納します．

		p3のフラグにより、取得情報とp1の変数の型が違います．
			p2 = 0　⇒⇒⇒　p1 = 曲名		(文字列:128バイト)
			p2 = 1　⇒⇒⇒　p1 = アーティスト名	(文字列:128バイト)
			p2 = 2　⇒⇒⇒　p1 = チャンネル		(数値型:1 or 2)
			p2 = 3　⇒⇒⇒　p1 = ビットレート	(数値型)
			p2 = 4　⇒⇒⇒　p1 = サンプリングレート (数値型)
			p2 = 5　⇒⇒⇒　p1 = 曲の長さ(秒単位)	(数値型)
		　チャンネルは、1がモノラル、2がステレオです．


    Wave 系 --------------------------------------------

	GetWaveOutVolL			;//タイプ $00

	    説明 :
		Wave出力の左側のボリュームを取得し、stat に格納します．

	    stat :
		Wave出力の左側のボリュームが、0 〜 100 %で範囲で格納されます．


	GetWaveOutVolR			;//タイプ $00

	    説明 :
		Wave出力の右側のボリュームを取得し、stat に格納します．

	    stat :
		Wave出力の右側のボリュームが、0 〜 100 %で範囲で格納されます．


	SetWaveOutVol p1, p2, p3			;//タイプ $00
*		p1 ------------	左側のWave音量(0〜65535)
*		p2 ------------	右側のWave音量(0〜65535)
*		p3 ------------	ボリューム用フラグ

	    説明 :
		p1 , p2 を指定し、Wave音量を指定します．
		　MP3系の再生で使われる音量もWave形式です．
*		p1 , p2 の音量は、0 が最小、65535 が最大 音量になり、
*		　0 〜 65535 の範囲で指定します．

		p3 に 0 以外を指定すると、設定される音量(p1,p2 or 現在の音量)が、
		　記憶され、クリーンアップ時にその音量に戻されます．

	    stat :
		正常終了時には、0 が格納されます．


;//--- EOF
